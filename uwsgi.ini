[uwsgi]
http=0.0.0.0:5000 # socket协议，用于和nginx通讯,端口可配置成别的端口；如果有nginx在uwsgi之前作为代理的话应该配socket   如：socket=0.0.0.0:5000，
# 而如果客户端请求不经过(不搭建)Nginx代理服务器,服务请求直接到uwsgi服务器的话那么就配http。如：http=0.0.0.0:5000;IP和端口与项目启动文件app.py中一致; 127.0.0.1虽然是表示本地IP，但想要在网络上访问必须设置host=0.0.0.0才不受IP限制
chdir=/Volumes/workspace/dzr-lab/flask-jinjia2/ # 项目目录，定位到项目的第一层，具体配置根据实际目录情况而定，如项目名称为falsk
wsgi-file=/Volumes/workspace/dzr-lab/flask-jinjia2/flask.py # 项目启动文件,实际也可能不是这个命名(需要带上文件路径，视具体目录情况而定)
callable=app # 程序内的application变量名，也即执行run方法的那个实例的名称
master=true # 启动主进程，来管理其他进程，其它的uwsgi进程都是这个master进程的子进程，如果kill这个master进程，相当于重启所有的uwsgi进程。
processes=4  # 进程数
threads=10 # 每个进程中线程数
daemonize=uwsgi.log # 使进程在后台运行，并将日志打到指定的日志文件，文件若不存在则会自动创建
disable-logging=true # 不记录请求信息的日志，只记录错误以及uWSGI内部消息到日志中。如果不开启这项，日志中会大量请求记录：
pidfile=uwsgi.pid # 进程号存储文件，若不存在则会自动创建，pid里面只记录一个进程号，若存在多个进程processes，则使用uwsgi命令通过uwsgi.pid文件停止、重启uwsgi服务不全
buffer-size=65536 # 设置用于uwsgi包解析的内部缓存区大小为64k，默认是4k。不设置该关键字，请求超过4k就会报错，
harakiri=60 # 超过时间，单位秒
vacuum=True # 当服务器退出的时候自动清理环境
